// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ScientificExperiment.WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240212083217_InitialCreat")]
    partial class InitialCreat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("DAL.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DAL.Entities.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageIndicator")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageTimeWork")
                        .HasColumnType("REAL");

                    b.Property<int>("CountOfExperiments")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("FirstTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("LastTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxIndicator")
                        .HasColumnType("REAL");

                    b.Property<int>("MaxTimeWork")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MedianByIndicator")
                        .HasColumnType("REAL");

                    b.Property<double>("MinIndicator")
                        .HasColumnType("REAL");

                    b.Property<int>("MinTimeWork")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("Results");
                });

            modelBuilder.Entity("DAL.Entities.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Indicator")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("DAL.Entities.Result", b =>
                {
                    b.HasOne("DAL.Entities.File", "File")
                        .WithOne("Result")
                        .HasForeignKey("DAL.Entities.Result", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("DAL.Entities.Value", b =>
                {
                    b.HasOne("DAL.Entities.File", "File")
                        .WithMany("Values")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("DAL.Entities.File", b =>
                {
                    b.Navigation("Result")
                        .IsRequired();

                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
